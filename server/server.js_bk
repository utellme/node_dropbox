let fs = require('fs')
let path = require('path')
let express = require ('express')
let morgan = require ('morgan')
let nodeify = require('bluebird-nodeify')
let mime = require('mime-types')
let rimraf = require('rimraf')
let mkdirp = require('mkdirp')
let bluebird = require('bluebird')

let jot = require('json-over-tcp')

//bluebird.Promise.longStackTraces()

require('songbird')

const NODE_ENV = process.env.NODE_ENV
const PORT = process.env.port || 8000
const ROOT_DIR = path.resolve(process.cwd())

const TCP_PORT = 9000


let app = express()

//if(NODE_ENV === 'development'){

	app.use(morgan('dev'))
//}

//tcp connection

let tcpserver = jot.createServer(TCP_PORT)
//tcpserver.on('listening', createConnection)
tcpserver.on('connection', newConnectionHandler)

// Triggered when something connects to the server
function newConnectionHandler(socket){
  // Whenever a connection sends us an object...
  socket.on('data', function(data){
    // Output the question property of the client's message to the console
    console.log("Client's question: " + data.question);

    // Wait one second, then write an answer to the client's socket
    setTimeout(function(){
      socket.write({answer: 42});
    }, 1000);
  });
};

// Creates one connection when the server starts listening
function createConnection(){
  // Start a connection to the server
  var socket = jot.connect(TCP_PORT, function(){
    // Send the initial message once connected
    socket.write({question: "Hello, world?"});
  });
  
  // Whenever the server sends us an object...
  socket.on('data', function(data){
    // Output the answer property of the server's message to the console
    console.log("Server's answer: " + data.answer);
    
    // Wait one second, then write a question to the socket
    setTimeout(function(){
      // Notice that we "write" a JSON object to the socket
      socket.write({question: "Hello, world?"});
    }, 1000);
  });
}

// Start listening
tcpserver.listen(TCP_PORT);

//http connection

app.listen(PORT, ()=> console.log('Listening @ http://127.0.0.1:' + PORT))

app.get('*', setFileMeta, sendHeaders, (req, res)=>{

	if(res.body) { 
		res.json(res.body)
		return	
	}

	fs.createReadStream(req.filepath).pipe(res)
	
})
	
app.head('*', setFileMeta, sendHeaders, (req, res) => res.end())



app.delete('*', setFileMeta, (req, res, next) => {

	async() => {

		if(!req.stat) return res.send(400, 'Invalid Path')
		if(req.stat.isDirectory()){
			await rimraf.promise(req.filepath)
		}
		else{
			await fs.promise.unlink(req.filepath)
		}
		res.end()

	}().catch(next)

})

app.post('*', setFileMeta, setDirDetails,(req,res, next) => {

	async() =>{
		
		if(req.stat) return res.send(405, 'File exists')
		await mkdirp.promise(req.dirPath)

		if(!req.isDir) req.pipe(fs.createWriteStream(req.filepath))
		res.end()
	}().catch(next)


})

app.put('*', setFileMeta, setDirDetails,(req,res, next) => {

	async() =>{
		if(!req.stat) return res.send(405, 'File does not exists')
		if(req.isDir) return res.send(405, 'Path is a directory')

		await fs.promise.truncate(req.filepath, 0)
		req.pipe(fs.createWriteStream(req.filepath))

		res.end()
	}().catch(next)


})

function setDirDetails(req, res, next) {

	

	let filepath = req.filepath
	let endsWithSlash = filepath.charAt(filepath.length-1) === path.sep
	let hasExt = path.extname(filepath) !==''
	req.isDir = endsWithSlash || !hasExt
	req.dirPath = req.isDir ? filepath:path.dirname(filepath)
	next()

}

function setFileMeta(req, res, next) {
	 req.filepath = path.resolve(path.join(ROOT_DIR, req.url))
	 
	if(req.filepath.indexOf(ROOT_DIR) !== 0){
		res.send(400, 'Invalid path')
		return
	}

	fs.promise.stat(req.filepath)
	.then(stat => req.stat = stat, ()=> req.stat = null)
	.nodeify(next)
}

function sendHeaders(req, res, next) {

	nodeify (async () => {

		if(req.stat.isDirectory()){

			let files = await fs.promise.readdir(req.filepath)
			res.body = JSON.stringify(files)
			res.setHeader('Content-Length', res.body.length)
			res.setHeader('Content-Type', 'application/json')
			return
		}

		res.setHeader('Content-Length', stat.size)
		let contentType = mime.contentType(path.extname(req.filepath))
		res.setHeader('Content-Type', contentType)

		

	}(),(next))
}
	

